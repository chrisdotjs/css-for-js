/* css: html css, no js needed 
css built-in state || position */

/* anatomy of a style rule */

/* a stylesheet
is a collection of rules/styles

a css rule
=== a style
is a collection of declarations

.error-text a selector
error-text a class
h1 a p section tag
*/
.error-text {
    /* 
    color: red; a declaration
    color: a property
    red: a value
    */
    color: blue;
}

h1 {
    font-size: x-large;
}

/* media queries */

/* add styles on small screen */
@media (max-width: 300px) {
    .small-only {
        color: red;
    }
}

/* hiding content */
/* navigation desktop links mobile ham menu */
.large-screens {
    display: none;
}

/* add styles on large screen */
@media (min-width: 300px) {
    .large-screens {
        display: block;
    }
    .small-screens {
        display: none;
    }
}

/* .button {
    button:hover {
        color: blue;
    }
} */

/* .button {
    color: brown;
} */

/* pseudo-classes functional pseudo-classes */

/* :hover a pseudo-class with built-in state management, a state
alternative to onMouseEnter/onMouseLeave js events which requires useState 
:focus :checked pseudo-class with built-in state, a state */
.button:hover {
    color: blue;
}


/* :last-child :first-child pseudo-class, add conditional logic */
p:last-child {
    margin-bottom: 0px;
}

li:first-child {
    color: red;
}

/* not working */
p:first-child {
    color: red;
}

/* :first-of-type :last-of-type pseudo-class 
select the first paragraph within a container, regardless of whether or not it's the first child */
p:first-of-type {
    color: black;
}

/* pseudo-elements 
::placeholder ::before ::after */

label {
    color: red;
}

input::placeholder {
    color: goldenrod;
}

p::before {
    content: '→ ';
    color: deeppink;
}
  
p::after {
    content: ' ←';
    color: deeppink;
}

/* if the effect is decorative it's fine to use ::before and ::after with an empty content string */
/* p::before {
    content: '';
    display: block;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    background-color: peachpuff;
    margin: 8px;
} */

/* combinators */


